/// <reference types="jest" />const request = require('supertest');const app = require('../../Servidor');let server;beforeAll(() => {  server = app.listen(3002)});afterAll(() =>{  server.close();})describe('Testar rota de login', () => {  it('Deve retornar 200 e um token ao fazer login com credenciais válidas', async () => {    const loginData = {      userEmail: 'igorrsilvaa920@gmail.com',      userPassword: '123',    };    const response = await request(app)      .post('/login')      .send(loginData);    expect(response.status).toBe(200);    expect(response.body).toHaveProperty('token');  });  it('Deve retornar 400 ao fazer login com credenciais inválidas', async () => {    const invalidLoginData = {      userEmail: 'invalid@example.com',      userPassword: 'wrongpassword',    };    const response = await request(app)      .post('/login')      .send(invalidLoginData);    expect(response.status).toBe(400);    expect(response.body).toHaveProperty('message');  });});